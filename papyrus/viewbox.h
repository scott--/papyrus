/***************************************************************************
 *   Copyright (C) 2004 by Rick L. Vinyard, Jr.                            *
 *   rvinyard@cs.nmsu.edu                                                  *
 *                                                                         *
 *   This file is part of the papyrus library.                             *
 *                                                                         *
 *   papyrus is free software; you can redistribute it and/or modify       *
 *   it under the terms of the GNU Lesser General Public License           *
 *   version 3.0 as published by the Free Software Foundation.             *
 *                                                                         *
 *   papyrus is distributed in the hope that it will be useful,            *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU Lesser General Public License version 3.0 for more details.       *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with the papyrus library. If not, see                   *
 *   <http://www.gnu.org/licenses/>.                                       *
 ***************************************************************************/
#ifndef PAPYRUSVIEWBOX_H
#define PAPYRUSVIEWBOX_H

#include <papyrus/pointer.h>
#include <papyrus/region.h>
#include <papyrus/matrix.h>

namespace Papyrus {

/**
 * \page guide_viewbox Using a Viewbox
 *
 * The Viewbox is based conceptually on the SVG viewBox attribute. This class also incorporates
 * the SVG preserveAspectRatio attribute.
 *
 * Combined, these attributes allow a Papyrus::Drawable to be confined to a specific bounded
 * area. The aspect ratio setting controls how the Papyrus::Drawable will be adapted to fit
 * inside the specified area.
 *
 * The meaning of the ALIGN and MEET_OR_SLICE aspects is identical to the same concepts in the
 * SVG specification.
 *
 * The MEET_OR_SLICE slice setting controls whether the shape is scaled to fit entirely inside
 * the Viewbox (MEET), or whether the shape is scaled to precisely fit one dimension (x or y)
 * and sliced to fit the other dimension (SLICE).
 *
 * The ALIGN setting controls where inside the Viewbox the Papyrus::Drawable is placed. The XMIN*
 * settings will align the Drawable with the left X boundary, XMID* will align the Drawable in the
 * center of the Viewbox, and XMAX* will align the Drawable on the right X boundary. Similarly the
 * YMIN*, YMID* and YMAX* aspects will align the Drawable in the Y dimension.
 *
 * The following image (generated by Papyrus itself) illustrates all possible aspect ratio settings.
 *
 * \image html viewbox.png "All possible Viewbox aspect ratio settings."
 */

/**
 * The Viewbox is based conceptually on the SVG viewBox attribute. This class also incorporates
 * the SVG preserveAspectRatio attribute.
 *
 * Combined, these attributes allow a Papyrus::Drawable to be confined to a specific bounded
 * area. The aspect ratio setting control how the Papyrus::Drawable will be adapted to fit
 * inside the specified area.
 *
 * The meaning of the ALIGN and MEET_OR_SLICE aspects is identical to the same concepts in the
 * SVG specification.
 *
 * The MEET_OR_SLICE slice setting controls whether the shape is scaled to fit entirely inside
 * the Viewbox (MEET), or whether the shape is scaled to precisely fit one dimension (x or y)
 * and sliced to fit the other dimension (SLICE).
 *
 * The ALIGN setting controls where inside the Viewbox the Papyrus::Drawable is placed. The XMIN*
 * settings will align the Drawable with the left X boundary, XMID* will align the Drawable in the
 * center of the Viewbox, and XMAX* will align the Drawable on the right X boundary. Similarly the
 * YMIN*, YMID* and YMAX* aspects will align the Drawable in the Y dimension.
 *
 * @author Rick L Vinyard Jr <rvinyard@cs.nmsu.edu>
 */
class Viewbox : public Region {
  public:

    typedef enum ALIGN {
        ALIGN_NONE,
        ALIGN_XMIN_YMIN,
        ALIGN_XMID_YMIN,
        ALIGN_XMAX_YMIN,
        ALIGN_XMIN_YMID,
        ALIGN_XMID_YMID,
        ALIGN_XMAX_YMID,
        ALIGN_XMIN_YMAX,
        ALIGN_XMID_YMAX,
        ALIGN_XMAX_YMAX,
    } ALIGN;

    typedef enum MEET_OR_SLICE {
        MEET,
        SLICE
    } MEET_OR_SLICE;

    typedef PapyrusPointer<Viewbox> pointer;

    // TODO Add support for Object id constructors
    // TODO review whether the constructor needs to be made protected
    
    Viewbox(double x=0.0, double y=0.0, double w=0.0, double h=0.0, ALIGN align=ALIGN_NONE, MEET_OR_SLICE meet_or_slice = MEET);

    Viewbox(const Region& region, ALIGN align=ALIGN_NONE, MEET_OR_SLICE meet_or_slice = MEET);

    static pointer create(double x=0.0, double y=0.0, double w=0.0, double h=0.0, ALIGN align=ALIGN_NONE, MEET_OR_SLICE meet_or_slice = MEET);

    static pointer create(const Region& region, ALIGN align=ALIGN_NONE, MEET_OR_SLICE meet_or_slice = MEET);

    virtual ~Viewbox();

    Viewbox& operator=( const Region& other );

    Viewbox& operator=( const Viewbox& other );

    bool operator==( const Region& other );

    bool operator==( const Viewbox& other );

    void set_preserve_aspect_ratio(ALIGN align, MEET_OR_SLICE meet_or_slice = MEET);

    ALIGN alignment() const;

    MEET_OR_SLICE meet_or_slice() const;

    /** Returns the transformation matrix that will fit @param box to this viewbox */
    Matrix transformation_matrix(const Region& box) const;

protected:
    ALIGN m_align;
    MEET_OR_SLICE m_meet_or_slice;

};

}

#endif
